const createBorrowerForm = [
  {
    label: "First Name:",
    name: "firstname",
    type: "text",
    required: false, // Custom validation handles this
    span: 6,
    helperText: "Either First Name or Business Name is required",
    autoComplete: "given-name",
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Middle / Last Name:",
    name: "othername",
    type: "text",
    required: false,
    span: 6,
    autoComplete: "family-name",
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Business Name:",
    name: "businessName",
    type: "text",
    required: false, // Custom validation handles this
    span: 12,
    autoComplete: "organization",
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Unique Identification Number:",
    name: "uniqueNumber",
    type: "text",
    required: false,
    span: 12,
    helperText: "Enter a unique identifier for the borrower (e.g National ID, Social Security ID, License No., Registration No.)",
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Mobile Number:",
    name: "mobile",
    type: "tel",
    required: false,
    span: 6,
    placeholder: "numbers only",    
    inputProps: { inputMode: "numeric", pattern: "[0-9]*" },
    helperText: "Do not put country code, spaces, or characters in the mobile field otherwise you won't be able to send SMS to the mobile.",
    validationType: "string",
    validationPattern: /^[0-9]*$/,
    validationMessage: "Mobile must contain numbers only",
    minLength: 7, // added minimum length
    maxLength: 20,
  },
  {
    label: "Alternative Phone Number:",
    name: "altPhone",
    type: "tel",
    required: false,
    span: 6,
    placeholder: "numbers only",    
    inputProps: { inputMode: "numeric", pattern: "[0-9]*" },
    validationType: "string",
    validationPattern: /^[0-9]*$/,
    validationMessage: "Alternative Phone must contain numbers only",
    minLength: 7, // added minimum length
    maxLength: 20,
  },
  {
    label: "Email:",
    name: "email",
    type: "email",
    required: false,
    span: 6,
    autoComplete: "email",
    validationType: "email",
    validationMessage: "Invalid email address",
  },
  {
    label: "Gender:",
    name: "gender",
    type: "select",
    required: false,
    span: 6,
    options: [
      { value: "Male", label: "Male" },
      { value: "Female", label: "Female" },
      { value: "Decline to State", label: "Decline to State" },
    ],
  },
  {
    label: "Title:",
    name: "title",
    type: "select",
    required: false,
    span: 6,
    options: [
      { value: "Mr.", label: "Mr." },
      { value: "Mrs.", label: "Mrs." },
      { value: "Ms.", label: "Ms." },
      { value: "Miss", label: "Miss" },
      { value: "Dr.", label: "Dr." },
      { value: "Prof.", label: "Prof." },
      { value: "Rev.", label: "Rev." },
      { value: "Hon.", label: "Hon." },
      { value: "Eng.", label: "Eng." },
    ],
  },
  {
    label: "Country:",
    name: "country",
    type: "select",
    required: false,
    span: 6,
  },
  {
    label: "Address:",
    name: "address",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "City:",
    name: "city",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Province / State:",
    name: "province",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Zipcode:",
    name: "zipcode",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Date of Birth:",
    name: "dob",
    type: "date",
    required: false,
    span: 6,
    validationType: "date",
  },
  {
    label: "Working Status:",
    name: "workingStatus",
    type: "select",
    required: false,
    span: 6,
    options: [
      { value: "Employed", label: "Employed" },
      { value: "Self-Employed", label: "Self-Employed" },
      { value: "Unemployed", label: "Unemployed" },
      { value: "Student", label: "Student" },
      { value: "Retired", label: "Retired" },
      { value: "Homemaker", label: "Homemaker" },
      { value: "Part-time", label: "Part-time" },
      { value: "Contract", label: "Contract" },
      { value: "Other", label: "Other" },
    ],
  },
  {
    label: "Employer Name:",
    name: "employerName",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Credit Score:",
    name: "creditScore",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
];

export default createBorrowerForm;
