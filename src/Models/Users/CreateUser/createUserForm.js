import { countries } from "../../../Resources/listOfCountries";

const createUserForm = [
  {
    label: "Email:",
    name: "email",
    type: "email",
    required: true,
    span: 6,
    autoComplete: "email",
    validationType: "email",
    validationMessage: "Invalid email address",
  },
  {
    label: "Branch:",
    name: "branch",
    type: "select",
    required: false,
    span: 6,
    options: [], // Add branch options here, e.g., similar to countries.map(c => ({ value: c, label: c }))
  },
    {
    label: "User Type:",
    name: "userType",
    type: "select",
    required: true,
    span: 6,
    options: [
      { value: "Admin", label: "Admin" },
      { value: "loanOfficer", label: "Loan Officer" },
      { value: "creditCommittee", label: "Credit Committee" },
      { value: "accountant", label: "Accountant" },
      { value: "cashier", label: "Cashier" },
      { value: "client", label: "Client" },
      { value: "branchManager", label: "Branch Manager" },
      { value: "auditor", label: "Auditor" },
      { value: "collectionsOfficer", label: "Collections Officer" },
      { value: "riskAnalyst", label: "Risk Analyst" },
      { value: "itSupport", label: "IT Support" },
    ],
  },

  {
    label: "Status:",
    name: "status",
    type: "select",
    required: true,
    span: 6,
    options: [
      { value: "Active", label: "Active" },
      { value: "Inactive", label: "Inactive" },
      { value: "Suspended", label: "Suspended" },
    ],
  },
  {
    label: "First Name:",
    name: "firstName",
    type: "text",
    required: false,
    span: 6,
    helperText: "First name is required",
    autoComplete: "given-name",
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Middle Name:",
    name: "middleName",
    type: "text",
    required: false,
    span: 6,
    autoComplete: "additional-name",
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Last Name:",
    name: "lastName",
    type: "text",
    required: false,
    span: 6,
    helperText: "Last name is required",
    autoComplete: "family-name",
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Primary Phone Number:",
    name: "phoneNumber1",
    type: "tel",
    required: false,
    span: 6,
    placeholder: "numbers only",
    inputProps: { inputMode: "numeric", pattern: "[0-9]*" },
    helperText: "Do not put country code, spaces, or characters in the phone field.",
    validationType: "string",
    validationPattern: /^[0-9]*$/,
    validationMessage: "Phone must contain numbers only",
    minLength: 7,
    maxLength: 20,
  },
  {
    label: "Secondary Phone Number:",
    name: "phoneNumber2",
    type: "tel",
    required: false,
    span: 6,
    placeholder: "numbers only",
    inputProps: { inputMode: "numeric", pattern: "[0-9]*" },
    validationType: "string",
    validationPattern: /^[0-9]*$/,
    validationMessage: "Phone must contain numbers only",
    minLength: 7,
    maxLength: 20,
  },
  {
    label: "Date of Birth:",
    name: "dateOfBirth",
    type: "date",
    required: false,
    span: 6,
    validationType: "date",
  },
  {
    label: "Nationality:",
    name: "nationality",
    type: "select",
    required: false,
    span: 6,
    options: countries.map(c => ({ value: c, label: c })),
  },
  {
    label: "National ID:",
    name: "nationalID",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Passport Number:",
    name: "passportNumber",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Address Line 1:",
    name: "addressLine1",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Address Line 2:",
    name: "addressLine2",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "City:",
    name: "city",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "State/Province:",
    name: "stateProvince",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Postal Code:",
    name: "postalCode",
    type: "text",
    required: false,
    span: 6,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
  {
    label: "Description:",
    name: "description",
    type: "textarea",
    required: false,
    span: 12,
    validationType: "string",
    validationPattern: /^[^,"'!{}]+$/,
    validationMessage: "Invalid characters found. Cannot use , \" ' ! { }",
  },
];

export default createUserForm;