input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
}

enum InterestCalculationMethod {
  SIMPLE
  COMPOUND
  FLAT
}

enum Frequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  SEMIANNUALLY
  ANNUALLY
}

type Institution @model {
  id: ID!
  name: String
  currencyCode: String
  subscriptionTier: String
  subscriptionStatus: String
  trialEndDate: AWSDate
  nextBillingDate: AWSDate
  stripeCustomerID: String
  stripeSubscriptionID: String

  # --- Geo / Regulatory settings ---
  defaultDateFormat: String
  defaultCurrencyFormat: String
  defaultLanguage: String
  regulatoryRegion: String

  # --- Tier‑based limits ---
  maxUsers: Int
  maxBranches: Int
  maxStaffPerBranch: Int

  # --- Feature flags ---
  saccoFeaturesEnabled: Boolean!
  staffManagementEnabled: Boolean!
  payrollEnabled: Boolean!
  collectionsModuleEnabled: Boolean!
  customWorkflowsEnabled: Boolean!
  advancedReportingEnabled: Boolean!

  # --- Integration settings ---
  apiIntegrationSettings: AWSJSON

  # --- Relationships (⇢ hasMany) ---
  users: [User] @hasMany
  branches: [Branch] @hasMany
  loanProducts: [LoanProduct] @hasMany
  customFormFields: [CustomFormField] @hasMany

  # --- LoanFeesConfig relationship ---
  loanFeesConfigs: [LoanFeesConfig] @hasMany

  status: String
}

type Branch @model {
  id: ID!
  name: String
  branchCode: String
  address: String
  status: String

  # --- Relationships ---
  institution: Institution @belongsTo
  users: [User] @hasMany
  borrowers: [Borrower] @hasMany
  employees: [Employee] @hasMany
  accounts: [Account] @hasMany
  documents: [Document] @hasMany
  loanProducts: [LoanProduct] @manyToMany(relationName: "BranchLoanProduct")
  payrolls: [Payroll] @hasMany
  financialReports: [FinancialReport] @hasMany
  customFormFields: [CustomFormField] @hasMany

  # --- LoanFeesConfig relationship ---
  loanFeesConfigs: [LoanFeesConfig]
    @manyToMany(relationName: "BranchLoanFeesConfig")
}

type User @model {
  id: ID!
  firstName: String
  lastName: String
  middleName: String
  dateOfBirth: AWSDate
  phoneNumber1: String
  phoneNumber2: String
  email: String
  addressLine1: String
  addressLine2: String
  city: String
  stateProvince: String
  postalCode: String
  nationalID: String
  passportNumber: String
  nationality: String
  status: String
  userType: String
  description: String
  institution: Institution @belongsTo
  branch: Branch @belongsTo
  userNotifications: [UserNotification] @hasMany
}

type Employee @model {
  id: ID!
  firstName: String
  lastName: String
  middleName: String
  dateOfBirth: AWSDate
  phoneNumber1: String
  phoneNumber2: String
  email: String
  title: String
  addressLine1: String
  addressLine2: String
  city: String
  stateProvince: String
  postalCode: String
  nextOfKinName: String
  nextOfKinPhoneNumber: String
  nextOfKinEmail: String
  nextOfKinRelationship: String
  nextOfKinAddress: String
  nationalID: String
  passportNumber: String
  nationality: String
  status: String
  employmentType: String
  employmentStatus: String
  employmentStartDate: AWSDate
  employmentEndDate: AWSDate
  employmentPosition: String
  employmentDepartment: String
  employmentGrade: String
  employmentLocation: String
  grossSalary: Float
  bankAccountNumber: String
  bankName: String
  bankBranchCode: String
  socialSecurityNumber: String
  taxIdentificationNumber: String
  taxExemptStatus: String
  customFieldsData: AWSJSON
  branch: Branch @belongsTo
  relatedUserID: ID @index(name: "byRelatedUserID")
  relatedBorrowerID: ID @index(name: "byRelatedBorrowerID")
  payroll: [Payroll] @manyToMany(relationName: "PayrollEmployee")
  approvedLoans: [Loan] @manyToMany(relationName: "LoanApprovedByEmployee")
  approvedExpenses: [Expense]
    @manyToMany(relationName: "ExpenseApprovedByEmployee")
  approvedApplications: [Application]
    @manyToMany(relationName: "ApplicationApprovedByEmployee")
  approvedCreditScores: [CreditScore]
    @manyToMany(relationName: "CreditScoreApprovedByEmployee")
  approvedMoneyTransactions: [MoneyTransaction]
    @manyToMany(relationName: "MoneyTransactionApprovedByEmployee")
  approvedPayments: [Payment]
    @manyToMany(relationName: "PaymentApprovedByEmployee")
  borrowers: [Borrower] @manyToMany(relationName: "BorrowerLoanOfficer")

  # Supervisor relationship
  supervisorID: ID @index(name: "bySupervisorID")
  supervisor: Employee @belongsTo(fields: ["supervisorID"])
  subordinates: [Employee] @hasMany(indexName: "bySupervisorID", fields: ["id"])

  # Indexed fields
  creditScore: [CreditScore]
    @hasMany(indexName: "byCreatedByEmployeeID", fields: ["id"])
  applications: [Application]
    @hasMany(indexName: "byCreatedByEmployeeID", fields: ["id"])
  documents: [Document]
    @hasMany(indexName: "byCreatedByEmployeeID", fields: ["id"])
  expenses: [Expense]
    @hasMany(indexName: "byCreatedByEmployeeID", fields: ["id"])
  payments: [Payment]
    @hasMany(indexName: "byReceivingEmployeeID", fields: ["id"])
  loans: [Loan] @hasMany(indexName: "byCreatedByEmployeeID", fields: ["id"])
  moneyTransactions: [MoneyTransaction]
    @hasMany(indexName: "byCreatedByEmployeeID", fields: ["id"])
  accounts: [Account]
    @hasMany(indexName: "byCreatedByEmployeeID", fields: ["id"])
}

type Borrower @model {
  id: ID!
  firstname: String
  othername: String
  businessName: String
  typeOfBusiness: String
  uniqueIdNumber: String
  phoneNumber: String
  otherPhoneNumber: String
  email: String
  gender: String
  dateOfBirth: String
  nationality: String
  nationalIdPicture: String
  passportPicture: String
  address: String
  points: Float
  borrowerOpeningBalance: Float
  borrowerClosingBalance: Float
  borrowerInterestRate: Float
  city: String
  state: String
  title: String
  zipcode: String
  employmentStatus: String
  employerName: String
  creditScore: String
  additionalNote1: String
  additionalNote2: String
  borrowerDocuments: AWSJSON
  customFieldsData: AWSJSON
  status: String
  branch: Branch @belongsTo
  loans: [Loan] @hasMany
  guarantors: [Guarantor] @hasMany
  securities: [Security] @hasMany
  applications: [Application] @hasMany
  contracts: [Contract] @hasMany
  documents: [Document] @manyToMany(relationName: "BorrowerDocument")
  employees: [Employee] @manyToMany(relationName: "BorrowerLoanOfficer")
  collaterals: [Collateral] @hasMany
  # Indexed fields
  creditScores: [CreditScore]
    @hasMany(indexName: "byBorrowerID", fields: ["id"])
}

type Guarantor @model {
  id: ID!
  name: String
  relationship: String
  phoneNumber: String
  email: String
  address: String
  customFieldsData: AWSJSON
  status: String
  borrower: Borrower @belongsTo
  loans: [Loan] @manyToMany(relationName: "LoanGuarantor")
  applications: [Application] @manyToMany(relationName: "ApplicationGuarantor")
}

type Security @model {
  id: ID!
  name: String
  type: String
  description: String
  value: Float
  status: String
  borrower: Borrower @belongsTo
}

type UserNotification @model {
  id: ID!
  eventType: String
  name: String
  description: String
  reference: String
  message: String
  status: String
  user: User @belongsTo
}

type LoanProduct @model {
  id: ID!
  name: String
  description: String

  # Principal settings
  principalAmountMin: Float
  principalAmountMax: Float
  principalAmountDefault: Float

  # Interest settings
  interestRateMin: Float
  interestRateMax: Float
  interestRateDefault: Float
  interestCalculationMethod: String
  interestType: String
  interestPeriod: String

  # Duration settings
  termDurationMin: Int
  termDurationMax: Int
  termDurationDefault: Int
  durationPeriod: String

  # Repayment settings
  repaymentFrequency: String
  repaymentOrder: AWSJSON

  # Maturity settings
  extendLoanAfterMaturity: Boolean
  interestTypeMaturity: String
  calculateInterestOn: String
  loanInterestRateAfterMaturity: Float
  recurringPeriodAfterMaturityUnit: String
  status: String

  # Relationships
  institution: Institution @belongsTo
  branches: [Branch] @manyToMany(relationName: "BranchLoanProduct")
  loanFees: [LoanFees] @manyToMany(relationName: "LoanProductLoanFees")
  loanPenalties: [Penalty] @manyToMany(relationName: "LoanProductPenalty")
  applications: [Application]
    @hasMany(indexName: "byLoanProductID", fields: ["id"])
  loans: [Loan] @hasMany(indexName: "byLoanProductID", fields: ["id"])
}

type CreditScore @model {
  id: ID!
  name: String
  description: String
  score: Float
  scoreDate: AWSDate
  scoreSource: String
  scoreStatus: String
  status: String
  approvedByEmployees: [Employee]
    @manyToMany(relationName: "CreditScoreApprovedByEmployee")
  borrowerID: ID @index(name: "byBorrowerID")
  borrower: Borrower @belongsTo(fields: ["borrowerID"])
  createdByEmployeeID: ID @index(name: "byCreatedByEmployeeID")
  createdByEmployee: Employee @belongsTo(fields: ["createdByEmployeeID"])
}

type Document @model {
  id: ID!
  documentType: String
  documentName: String
  documentDescription: String
  serialNumber: String
  documentDate: AWSDate
  s3Key: String
  fileName: String
  contentType: String
  status: String
  branch: Branch @belongsTo
  borrowers: [Borrower] @manyToMany(relationName: "BorrowerDocument")
  loans: [Loan] @manyToMany(relationName: "LoanDocument")
  applications: [Application] @manyToMany(relationName: "ApplicationDocument")
  contracts: [Contract] @manyToMany(relationName: "ContractDocument")
  expenses: [Expense] @manyToMany(relationName: "ExpenseDocument")
  payments: [Payment] @manyToMany(relationName: "PaymentDocument")
  createdByEmployeeID: ID @index(name: "byCreatedByEmployeeID")
  createdByEmployee: Employee @belongsTo(fields: ["createdByEmployeeID"])
}

type Contract @model {
  id: ID!
  contractNumber: String
  contractType: String
  contractDate: AWSDate
  contractStatus: String
  contractRecord: AWSJSON
  status: String
  borrower: Borrower @belongsTo
  applications: [Application] @manyToMany(relationName: "ApplicationContract")
  collaterals: [Collateral] @manyToMany(relationName: "CollateralContract")
  documents: [Document] @manyToMany(relationName: "ContractDocument")
  loans: [Loan] @manyToMany(relationName: "LoanContract")
}

type Application @model {
  id: ID!
  name: String
  description: String
  applicationNumber: String
  requestedPrincipalAmount: Float
  requestedTermMonths: Int
  requestedFrequency: Frequency
  applicationDate: AWSDate
  status: String
  applicationRecord: AWSJSON
  borrower: Borrower @belongsTo
  guarantors: [Guarantor] @manyToMany(relationName: "ApplicationGuarantor")
  collateral: [Collateral] @manyToMany(relationName: "ApplicationCollateral")
  contracts: [Contract] @manyToMany(relationName: "ApplicationContract")
  expenses: [Expense] @manyToMany(relationName: "ApplicationExpense")
  loans: [Loan] @manyToMany(relationName: "LoanApplication")
  approvedByEmployees: [Employee]
    @manyToMany(relationName: "ApplicationApprovedByEmployee")
  documents: [Document] @manyToMany(relationName: "ApplicationDocument")
  loanProductID: ID @index(name: "byLoanProductID")
  loanProduct: LoanProduct @belongsTo(fields: ["loanProductID"])
  createdByEmployeeID: ID @index(name: "byCreatedByEmployeeID")
  createdByEmployee: Employee @belongsTo(fields: ["createdByEmployeeID"])
  customFieldsData: AWSJSON
}

type Collateral @model {
  id: ID!
  name: String
  type: String
  description: String
  location: String
  value: Float
  serialNumber: String
  registrationNumber: String
  insuranceDetails: String
  insuranceExpiryDate: AWSDate
  insuranceCompany: String
  storedAt: String
  customFieldsData: AWSJSON
  status: String
  borrower: Borrower @belongsTo
  loans: [Loan] @manyToMany(relationName: "LoanCollateral")
  applications: [Application] @manyToMany(relationName: "ApplicationCollateral")
  contracts: [Contract] @manyToMany(relationName: "CollateralContract")
}

type Loan @model {
  id: ID!
  approvalStatus: String
  approvedDate: AWSDate
  principal: Float
  fees: Float
  interestRate: Float
  startDate: AWSDate
  maturityDate: AWSDate
  stopDate: AWSDate
  extensionPeriod: Float
  duration: Float
  durationInterval: String
  loanType: String
  rateInterval: String
  loanStatus: String
  loanCurrency: String
  loanPurpose: String
  loanComputationRecord: AWSJSON
  loanAttribute1: String
  loanAttribute2: String
  numberOfPayments: Float
  paymentFrequency: String
  customFieldsData: AWSJSON
  status: String
  borrower: Borrower @belongsTo
  payments: [Payment] @hasMany
  loanFees: [LoanFees] @hasMany
  penalties: [Penalty] @hasMany
  applications: [Application] @manyToMany(relationName: "LoanApplication")
  accounts: [Account] @manyToMany(relationName: "LoanAccount")
  guarantors: [Guarantor] @manyToMany(relationName: "LoanGuarantor")
  collateral: [Collateral] @manyToMany(relationName: "LoanCollateral")
  contracts: [Contract] @manyToMany(relationName: "LoanContract")
  expenses: [Expense] @manyToMany(relationName: "LoanExpense")
  approvedByEmployees: [Employee]
    @manyToMany(relationName: "LoanApprovedByEmployee")
  documents: [Document] @manyToMany(relationName: "LoanDocument")
  loanProductID: ID @index(name: "byLoanProductID")
  loanProduct: LoanProduct @belongsTo(fields: ["loanProductID"])
  createdByEmployeeID: ID @index(name: "byCreatedByEmployeeID")
  createdByEmployee: Employee @belongsTo(fields: ["createdByEmployeeID"])
}

type Investment @model {
  id: ID!
  principal: Float
  description: String
  fees: Float
  interestRate: Float
  startDate: AWSDate
  maturityDate: AWSDate
  stopDate: AWSDate
  extensionPeriod: Float
  duration: Float
  durationInterval: String
  type: String
  rateInterval: String
  investmentStatus: String
  investmentAttribute1: String
  investmentAttribute2: String
  numberOfPayments: Float
  paymentFrequency: Float
  status: String
  accounts: [Account] @manyToMany(relationName: "InvestmentAccount")
}

type LoanFees @model {
  id: ID!
  amount: Float
  loanFeesName: String
  loanFeesCategory: String
  loanFeesCalculationMethod: String
  loanFeesRate: Float
  loanFeesDate: AWSDate
  loanFeesStatus: String
  notes: String
  loanFeesType: String
  loanFeesDescription: String
  loanFeesAttribute1: String
  loanFeesAttribute2: String
  status: String
  loan: Loan @belongsTo
  loanProducts: [LoanProduct] @manyToMany(relationName: "LoanProductLoanFees")
  accountID: ID @index(name: "byAccountID")
  account: Account @belongsTo(fields: ["accountID"])
  loanFeesConfigs: [LoanFeesConfig]
    @manyToMany(relationName: "LoanFeesLoanFeesConfig")
}

type Penalty @model {
  id: ID!
  amount: Float
  penaltyName: String
  penaltyCategory: String
  penaltyCalculationMethod: String
  penaltyRate: Float
  penaltyDate: AWSDate
  penaltyStatus: String
  notes: String
  penaltyType: String
  penaltyDescription: String
  penaltyAttribute1: String
  penaltyAttribute2: String
  status: String
  loan: Loan @belongsTo
  loanProducts: [LoanProduct] @manyToMany(relationName: "LoanProductPenalty")
  accountID: ID @index(name: "byAccountID")
  account: Account @belongsTo(fields: ["accountID"])
}

type Payroll @model {
  id: ID!
  periodStartDate: AWSDate
  periodEndDate: AWSDate
  payDate: AWSDate
  status: String
  processedByUserID: String
  totalGrossPay: Float
  totalLoanDeductions: Float
  totalSavingsDeductions: Float
  totalShareDeductions: Float
  totalNetPay: Float
  details: String
  branch: Branch @belongsTo
  employees: [Employee] @manyToMany(relationName: "PayrollEmployee")
}

type Account @model {
  id: ID!
  name: String
  accountType: String
  accountNumber: String
  description: String
  currency: String
  currentBalance: Float
  openingBalance: Float
  interestRate: Float
  interestCalculationMethod: String
  interestPostingFrequency: String
  interestPostingDate: String
  interestAccrued: Float
  interestAccruedDate: AWSDate
  accountStatus: String
  status: String
  branch: Branch @belongsTo
  moneyTransactions: [MoneyTransaction] @hasMany
  expenses: [Expense] @hasMany
  loans: [Loan] @manyToMany(relationName: "LoanAccount")
  investments: [Investment] @manyToMany(relationName: "InvestmentAccount")
  otherIncomes: [OtherIncome] @manyToMany(relationName: "OtherIncomeAccount")
  loanFees: [LoanFees] @hasMany(indexName: "byAccountID", fields: ["id"])
  payments: [Payment] @hasMany(indexName: "byAccountID", fields: ["id"])
  penalties: [Penalty] @hasMany(indexName: "byAccountID", fields: ["id"])
  createdByEmployeeID: ID @index(name: "byCreatedByEmployeeID")
  createdByEmployee: Employee @belongsTo(fields: ["createdByEmployeeID"])
}

type MoneyTransaction @model {
  id: ID!
  transactionType: String
  transactionDate: AWSDate
  amount: Float!
  description: String
  referenceNumber: String
  relatedEntityType: String
  approvalStatus: String
  approvedDate: AWSDate
  category: String
  notes: String
  paymentMethod: String
  deviceInfo: String
  status: String
  account: Account @belongsTo
  approvedByEmployees: [Employee]
    @manyToMany(relationName: "MoneyTransactionApprovedByEmployee")
  createdByEmployeeID: ID @index(name: "byCreatedByEmployeeID")
  createdByEmployee: Employee @belongsTo(fields: ["createdByEmployeeID"])
}

type Payment @model {
  id: ID!
  paymentDate: AWSDate
  paymentType: String
  amount: Float!
  description: String
  referenceNumber: String
  paymentMethod: String
  status: String
  notes: String
  loan: Loan @belongsTo
  accountID: ID @index(name: "byAccountID")
  account: Account @belongsTo(fields: ["accountID"])
  receivingEmployeeID: ID @index(name: "byReceivingEmployeeID")
  receivingEmployee: Employee @belongsTo(fields: ["receivingEmployeeID"])
  approvedByEmployees: [Employee]
    @manyToMany(relationName: "PaymentApprovedByEmployee")
  documents: [Document] @manyToMany(relationName: "PaymentDocument")
}

type Expense @model {
  id: ID!
  transactionDate: AWSDate
  amount: Float!
  description: String
  referenceNumber: String
  receiptDocumentS3Key: String
  status: String
  notes: String
  payee: String
  paymentMethod: String
  checkNumber: String
  approvedDate: AWSDate
  type: String
  category: String
  account: Account @belongsTo
  loans: [Loan] @manyToMany(relationName: "LoanExpense")
  applications: [Application] @manyToMany(relationName: "ApplicationExpense")
  approvedByEmployees: [Employee]
    @manyToMany(relationName: "ExpenseApprovedByEmployee")
  documents: [Document] @manyToMany(relationName: "ExpenseDocument")
  createdByEmployeeID: ID @index(name: "byCreatedByEmployeeID")
  createdByEmployee: Employee @belongsTo(fields: ["createdByEmployeeID"])
}

type OtherIncome @model {
  id: ID!
  name: String
  description: String
  amount: Float
  incomeDate: AWSDate
  incomeType: String
  status: String
  accounts: [Account] @manyToMany(relationName: "OtherIncomeAccount")
}

type FinancialReport @model {
  id: ID!
  reportName: String
  reportType: String
  reportDate: AWSDate
  startDate: AWSDate
  endDate: AWSDate
  reportData: AWSJSON
  status: String
  branch: Branch @belongsTo
}

type CustomFormField @model {
  id: ID!
  formKey: String # e.g. "CreateBorrowerForm"
  label: String
  fieldType: String # e.g. "text", "number", "select"
  options: AWSJSON # for dropdowns, radios, etc.
  required: Boolean
  order: Int
  createdBy: String
  status: String
  branch: Branch @belongsTo
  institution: Institution @belongsTo
}

type LoanFeesConfig @model {
  id: ID!
  name: String # Fee name (required)
  category: String # "non_deductable", "deductable", or "capitalized"
  calculationMethod: String # "fixed" or "percentage"
  description: String
  percentageBase: String # "principal", "interest", or "principal_interest" (nullable, only for percentage)
  rate: Float # For percentage-based fees (nullable)
  status: String
  institution: Institution @belongsTo
  branches: [Branch] @manyToMany(relationName: "BranchLoanFeesConfig")
  loanFees: [LoanFees] @manyToMany(relationName: "LoanFeesLoanFeesConfig")
}

# ---------- End of Schema ----------
