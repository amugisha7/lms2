# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
# schema.graphql — Transformer v2 (Corrected Version)

# ---------- Enums ----------

type Institution @model {
  id: ID!
  name: String!
  currencyCode: String!
  subscriptionTier: SubscriptionTier!

  subscriptionStatus: SubscriptionStatus!

  trialEndDate: AWSDate
  nextBillingDate: AWSDate
  stripeCustomerID: String
  stripeSubscriptionID: String

  # --- Geo / Regulatory settings ---

  defaultDateFormat: String
  defaultCurrencyFormat: String
  defaultLanguage: String
  regulatoryRegion: String

  # --- Tier‑based limits ---

  maxUsers: Int!
  maxBranches: Int!
  maxStaffPerBranch: Int!

  # --- Feature flags ---

  saccoFeaturesEnabled: Boolean!
  staffManagementEnabled: Boolean!
  payrollEnabled: Boolean!
  collectionsModuleEnabled: Boolean!
  customWorkflowsEnabled: Boolean!
  advancedReportingEnabled: Boolean!

  # --- Integration settings ---

  apiIntegrationSettings: AWSJSON

  # --- Relationships (⇢ hasMany) ---

  users: [User] @hasMany
  branches: [Branch] @hasMany
  clients: [Client] @hasMany
  clientTypeConfigs: [ClientTypeConfig] @hasMany
  riskLevelConfigs: [RiskLevelConfig] @hasMany
  kycDocTypeConfigs: [KYCDocumentTypeConfig] @hasMany
  kycDocuments: [KYCDocument] @hasMany
  appDocTypeConfigs: [ApplicationDocumentTypeConfig] @hasMany
  collateralTypeConfigs: [CollateralTypeConfig] @hasMany
  loanPurposeConfigs: [LoanPurposeConfig] @hasMany
  feeConfigs: [FeeConfig] @hasMany
  penaltyConfigs: [PenaltyConfig] @hasMany
  loanProducts: [LoanProduct] @hasMany
  workflowDefinitions: [WorkflowDefinition] @hasMany
  scorecards: [Scorecard] @hasMany
  documentTemplates: [DocumentTemplate] @hasMany
  membershipFeeConfigs: [MembershipFeeConfig] @hasMany
  savingsProducts: [SavingsProduct] @hasMany
  moneyAccounts: [MoneyAccount] @hasMany
  notificationTemplates: [NotificationTemplate] @hasMany
  userNotifications: [UserNotification] @hasMany
  reportDefinitions: [ReportDefinition] @hasMany
  businessRules: [BusinessRule] @hasMany
  apiConfigurations: [APIConfiguration] @hasMany
  incomeCategories: [IncomeCategoryConfig] @hasMany
  glAccounts: [GLAccount] @hasMany
  glPostings: [GLPosting] @hasMany
  payrollRuns: [PayrollRun] @hasMany
  loanLoanA [LoanApplication] @hasMany
  loanAccounts: [LoanAccount] @hasMany
  customClientFieldDefinitions: [CustomClientFieldDefinition] @hasMany
  shareAccounts: [ShareAccount] @hasMany
  savingsAccounts: [SavingsAccount] @hasMany
  collaterals: [Collateral] @hasMany
  guarantors: [Guarantor] @hasMany
  applicationDocuments: [ApplicationDocument] @hasMany
  writeOffRecords: [WriteOffRecord] @hasMany
  collectionAssignments: [CollectionAssignment] @hasMany
  collectionActions: [CollectionAction] @hasMany
  promisesToPay: [PromiseToPay] @hasMany
  legalActionRecords: [LegalActionRecord] @hasMany
  repossessionRecords: [RepossessionRecord] @hasMany
  collectionAlerts: [CollectionAlert] @hasMany
  employeePayrollProfiles: [EmployeePayrollProfile] @hasMany
  loanTransactions: [LoanTransaction] @hasMany
  shareTransactions: [ShareTransaction] @hasMany
  savingsTransactions: [SavingsTransaction] @hasMany
  payrollRunDetails: [PayrollRunDetail] @hasMany
  # Add to Institution model
  membershipFeeCharges: [MembershipFeeCharge] @hasMany
  repaymentScheduleInstallments: [RepaymentScheduleInstallment] @hasMany
}

type Branch @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])
  name: String!
  branchCode: String
  address: String

  # --- Relationships ---

  users: [User] @hasMany
  clients: [Client] @hasMany
  loanApplications: [LoanApplication] @hasMany
  loanAccounts: [LoanAccount] @hasMany
  moneyAccounts: [MoneyAccount] @hasMany
  financialReports: [FinancialReport] @hasMany

}

type User @model {
  id: ID! # Cognito user sub
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  payrollDetails: [PayrollRunDetail] @hasMany

  username: String!
  email: AWSEmail!
  phoneNumber: AWSPhone
  firstName: String!
  lastName: String!
  jobTitle: String
  status: String! # Active / Inactive
  branchID: ID!
  branch: Branch @belongsTo(fields: ["branchID"])

  roles: [Role!]!

  supervisorUserID: ID
  supervisor: User @belongsTo(fields: ["supervisorUserID"])
  supervisees: [User] @hasMany

  # --- Relationships ---
  approvedExpenses: [Expense]
    @hasMany(indexName: "byApprovedByUserID", fields: ["id"])
  createdExpenses: [Expense]
    @hasMany(indexName: "byCreatedByUserID", fields: ["id"])
  payrollProfile: EmployeePayrollProfile @hasOne(fields: ["id"])
  notificationPreferences: [UserNotificationPreference] @hasMany
  notifications: [UserNotification] @hasMany
  reportExecutions: [ReportExecution] @hasMany
  ownedClients: [Client] @hasMany
  assignedLoanApplications: [LoanApplication] @hasMany
  assignedLoanAccounts: [LoanAccount] @hasMany
  assignedCollections: [CollectionAssignment] @hasMany
  collectionActions: [CollectionAction] @hasMany
  targetedCollectionAlerts: [CollectionAlert] @hasMany
  acknowledgedCollectionAlerts: [CollectionAlert] @hasMany
  processedPayrollRuns: [PayrollRun] @hasMany
  approvedMoneyTransactions: [MoneyTransaction] @hasMany
  createdMoneyTransactions: [MoneyTransaction] @hasMany
  promisesToPay: [PromiseToPay] @hasMany

  lastConnectionCheck: AWSDateTime
  connectionStatus: ConnectionStatus
  deviceInfo: String

}

type Borrower @model {
  id: ID!
  firstname: String
  othername: String
  businessName: String
  typeOfBusiness: String
  uniqueIdNumber: String
  phoneNumber: String
  otherPhoneNumber: String
  email: String
  gender: String
  dateOfBirth: String
  nationality: String
  nationalIdPicture: String
  passportPicture: String
  address: String
  points: Float
  borrowerOpeningBalance: Float
  borrowerClosingBalance: Float
  borrowerInterestRate: Float
  city: String
  state: String
  zipcode: String
  employmentStatus: String
  employerName: String
  creditScore: String
  additionalNote1: String
  additionalNote2: String
  borrowerDocument1: String
  borrowerDocument1URL: String
  borrowerDocument2: String
  borrowerDocument2URL: String
  borrowerDocument3: String
  borrowerDocument3URL: String
  borrowerDocument4: String
  borrowerDocument4URL: String
  borrowerStatus: String
  borrowertype: String
  borrowerAttribute1: String
  borrowerAttribute2: String
  branch: Branch @belongsTo
  loans: [Loan] @hasMany
  guarantors: [Guarantor] @hasMany
  securities: [Security] @hasMany
  applications: [Application] @hasMany
  contracts: [Contract] hasMany
}
# ---------- Notification subsystem ----------

type NotificationTemplate @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  eventType: String!
  templateTitle: String!
  templateBody: String!
  channels: [NotificationChannel]!
  isActive: Boolean!
}

type UserNotification @model {
  id: ID!
  userID: ID!
  user: User @belongsTo(fields: ["userID"])
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"]) # Added belongsTo Institution
  title: String!
  message: String!
  eventType: String!
  referenceID: ID
  referenceType: String
  isRead: Boolean!
  channel: NotificationChannel!
}

type UserNotificationPreference @model {
  id: ID!
  userID: ID!
  user: User @belongsTo(fields: ["userID"])
  eventType: String!
  channels: [NotificationChannel]!
  isEnabled: Boolean!
}

# ---------- Reporting System ----------

type ReportDefinition @model {
  id: ID!
  institutionID: ID!

  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  description: String
  reportType: ReportType!
  category: ReportCategory!
  queryDefinition: AWSJSON!
  parameters: AWSJSON
  outputFormat: ReportOutputFormat!
  isSystem: Boolean!
  schedules: [ReportSchedule] @hasMany
  executions: [ReportExecution] @hasMany

  createdByUserID: ID!
  # createdByUser: User @belongsTo(fields: ["createdByUserID"]) # Optional: Add belongsTo user

}

type ReportSchedule @model {
  id: ID!
  reportDefinitionID: ID!
  reportDefinition: ReportDefinition @belongsTo(fields: ["reportDefinitionID"])

  name: String!
  frequency: Frequency!
  nextRunDate: AWSDate
  recipientUserIDs: [ID]
  recipientEmails: [AWSEmail]
  parameters: AWSJSON
  isActive: Boolean!
  lastRunAt: AWSDateTime
  executions: [ReportExecution] @hasMany

  createdByUserID: ID!
  # createdByUser: User @belongsTo(fields: ["createdByUserID"]) # Optional: Add belongsTo user

}

type ReportExecution @model {
  id: ID!
  reportDefinitionID: ID!

  reportDefinition: ReportDefinition @belongsTo(fields: ["reportDefinitionID"])

  reportScheduleID: ID
  reportSchedule: ReportSchedule @belongsTo(fields: ["reportScheduleID"])

  executionDate: AWSDateTime!
  parameters: AWSJSON
  outputFormat: ReportOutputFormat!
  outputLocation: String
  status: ReportStatus!
  errorMessage: String

  executedByUserID: ID!
  user: User @belongsTo(fields: ["executedByUserID"])
}

# ---------- Workflow Engine ----------

type WorkflowDefinition @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  appliesTo: String!
  entityType: String!
  description: String
  stages: [WorkflowStage] @hasMany
  transitions: [WorkflowTransition] @hasMany
  initialStageID: ID! # References a stage within stages
  isActive: Boolean
  allowsParallelProcessing: Boolean
  version: Int!

  # --- Relationships ---

  loanProducts: [LoanProduct] @hasMany

}

type WorkflowStage @model {
  id: ID!
  workflowDefinitionID: ID!
  workflowDefinition: WorkflowDefinition
    @belongsTo(fields: ["workflowDefinitionID"])

  name: String!
  description: String
  rolesAllowedToTransition: [Role!]!
  requiredApprovals: Int
  slaHours: Int
  stageType: StageType
  businessRuleID: ID
  businessRule: BusinessRule @belongsTo(fields: ["businessRuleID"])
  formDefinition: AWSJSON

  # --- Relationships ---

  outgoingTransitions: [WorkflowTransition] @hasMany
  incomingTransitions: [WorkflowTransition] @hasMany

}

type WorkflowTransition @model {
  id: ID!
  workflowDefinitionID: ID!

  workflowDefinition: WorkflowDefinition
    @belongsTo(fields: ["workflowDefinitionID"])

  fromStageID: ID!
  fromStage: WorkflowStage @belongsTo(fields: ["fromStageID"])

  toStageID: ID!
  toStage: WorkflowStage @belongsTo(fields: ["toStageID"])

  name: String
  conditionLogic: AWSJSON

}

# ---------- Business Rules ----------

type BusinessRule @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  description: String
  triggerEntity: String!
  triggerEvent: String!
  conditionLogic: AWSJSON!
  actions: AWSJSON!
  priority: Int!
  isActive: Boolean!

  # --- Relationships ---

  workflowStages: [WorkflowStage] @hasMany

  createdByUserID: ID!
  # createdByUser: User @belongsTo(fields: ["createdByUserID"]) # Optional: Add belongsTo user

}

# ---------- API Integration ----------

type APIConfiguration @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  description: String
  integrationType: IntegrationType!
  connectionDetails: AWSJSON!
  isActive: Boolean!
  lastTestedAt: AWSDateTime
  testResult: String

  createdByUserID: ID!
  # createdByUser: User @belongsTo(fields: ["createdByUserID"]) # Optional: Add belongsTo user

}

# ---------- Configurable Lists & Core Client Models ----------

# ---- Config lists (simple look‑ups) ----

type ClientTypeConfig @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])
  name: String!
  description: String

  # --- Relationships ---

  clients: [Client] @hasMany
}

type RiskLevelConfig @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])
  name: String!
  description: String

  # --- Relationships ---

  clients: [Client] @hasMany
}

type KYCDocumentTypeConfig @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])
  name: String!

  # --- Relationships ---

  documents: [KYCDocument] @hasMany
}

type ApplicationDocumentTypeConfig @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])
  name: String!

  # --- Relationships ---

  documents: [ApplicationDocument] @hasMany
}

type CollateralTypeConfig @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])
  name: String!

  # --- Relationships ---

  collaterals: [Collateral] @hasMany
}

type LoanPurposeConfig @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])
  name: String!
  description: String

  # --- Relationships ---

  loanApplications: [LoanApplication] @hasMany
}

# ---- Fees & Penalties ----

type FeeConfig @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  calculationMethod: FeeCalculationMethod!
  collectionTiming: FeeCollectionTiming!
  amountOrPercentage: Float!
  isActive: Boolean

  feeIncomeGLAccountID: ID!
  feeReceivableGLAccountID: ID

  # --- Relationships (added) ---

  loanProducts: [LoanProduct] @manyToMany(relationName: "LoanProductFee")
}

type PenaltyConfig @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  penaltyType: PenaltyType!
  calculationFrequency: PenaltyCalculationFrequency!
  gracePeriodDays: Int
  amountOrRate: Float!
  isActive: Boolean

  penaltyIncomeGLAccountID: ID!
  penaltyReceivableGLAccountID: ID!

  # --- Relationships (added) ---

  loanProducts: [LoanProduct] @manyToMany(relationName: "LoanProductPenalty")
}

type MembershipFeeConfig @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  amount: Float!
  frequency: Frequency!
  chargeDate: String
  feeIncomeGLAccountID: ID!
  feeReceivableGLAccountID: ID!
  isActive: Boolean

  # --- Relationships ---

  membershipFeeCharges: [MembershipFeeCharge] @hasMany
}

# ---- Added Missing Loan Product ----

type LoanProduct @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  description: String
  interestRateMin: Float!
  interestRateMax: Float!
  termMonthsMin: Int!
  termMonthsMax: Int!
  principalAmountMin: Float!
  principalAmountMax: Float!
  interestCalculationMethod: InterestCalculationMethod!
  dayCountConvention: DayCountConvention!
  repaymentFrequencies: [Frequency]!

  feeConfigs: [FeeConfig] @manyToMany(relationName: "LoanProductFee")
  penaltyConfigs: [PenaltyConfig]
    @manyToMany(relationName: "LoanProductPenalty")

  workflowDefinitionID: ID
  workflowDefinition: WorkflowDefinition
    @belongsTo(fields: ["workflowDefinitionID"])

  # --- Relationships ---

  loanApplications: [LoanApplication] @hasMany
  loanAccounts: [LoanAccount] @hasMany

  isActive: Boolean!
}

# ---- Savings & Templates ----

type SavingsProduct @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  description: String
  interestRate: Float!
  interestCalculationMethod: String!
  interestPostingFrequency: Frequency!
  minimumBalance: Float
  allowsOverdraft: Boolean
  isActive: Boolean

  savingsLiabilityGLAccountID: ID!
  interestExpenseGLAccountID: ID!

  # --- Relationships ---

  savingsAccounts: [SavingsAccount] @hasMany
}

type DocumentTemplate @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  description: String
  templateType: String!
  content: String! # HTML / Rich text
  isActive: Boolean
  Added missing createdAt
}

# ---- Scoring ----

type Scorecard @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  name: String!
  description: String
  factors: [ScorecardFactor] @hasMany
  gradeThresholds: AWSJSON
  isActive: Boolean
  Added missing createdAt
}

type ScorecardFactor @model {
  id: ID!
  scorecardID: ID!
  scorecard: Scorecard @belongsTo(fields: ["scorecardID"])

  factorName: String!
  sourceField: String!
  valuePointsMapping: AWSJSON!
  Added missing createdAt
}

# ---- Client & related entities ----

type Client @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  branchID: ID!
  branch: Branch @belongsTo(fields: ["branchID"])

  systemGeneratedClientID: String!
  firstName: String!
  lastName: String!
  middleName: String
  dateOfBirth: AWSDate!
  gender: String!
  nationalID: String
  primaryPhoneNumber: String!
  secondaryPhoneNumber: String
  email: AWSEmail
  addressLine1: String
  addressLine2: String
  city: String
  stateProvince: String
  postalCode: String
  country: String
  status: ClientStatus!

  onboardingDate: AWSDateTime
  activationDate: AWSDateTime
  notes: String

  clientTypeID: ID!
  clientType: ClientTypeConfig @belongsTo(fields: ["clientTypeID"])
  riskLevelID: ID!
  riskLevel: RiskLevelConfig @belongsTo(fields: ["riskLevelID"])

  ownerUserId: ID!
  ownerUser: User @belongsTo(fields: ["ownerUserId"])

  # --- Relationships ---

  customFields: [CustomClientFieldValue] @hasMany
  kycDocuments: [KYCDocument] @hasMany
  loanApplications: [LoanApplication] @hasMany
  loanAccounts: [LoanAccount] @hasMany
  savingsAccounts: [SavingsAccount] @hasMany
  shareAccount: ShareAccount @hasOne(fields: ["id"])
  membershipFeeCharges: [MembershipFeeCharge] @hasMany
  guarantorRelationships: [Guarantor] @hasMany

}

type CustomClientFieldDefinition @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])
  fieldName: String!
  fieldType: String!
  isRequired: Boolean
  isActive: Boolean

  # --- Relationships ---

  fieldValues: [CustomClientFieldValue] @hasMany

  Added missing createdAt
}

type CustomClientFieldValue @model {
  id: ID!
  clientID: ID!
  client: Client @belongsTo(fields: ["clientID"])

  fieldDefinitionID: ID!
  fieldDefinition: CustomClientFieldDefinition
    @belongsTo(fields: ["fieldDefinitionID"])
  value: String!
  Added missing createdAt
}

type KYCDocument @model {
  id: ID!
  clientID: ID!
  client: Client @belongsTo(fields: ["clientID"])
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"]) # Added belongsTo institution
  documentTypeID: ID!
  documentType: KYCDocumentTypeConfig @belongsTo(fields: ["documentTypeID"])

  s3Key: String!
  fileName: String
  fileSize: Int
  contentType: String
}

# ---------- Share, Savings, and Membership ----------

type ShareAccount @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"]) # Added belongsTo
  clientID: ID!
  client: Client @belongsTo(fields: ["clientID"])

  accountNumber: String!
  currentBalance: Float!
  status: String! # Active / Dormant / Closed
  lienAmount: Float
  availableBalance: Float

  transactions: [ShareTransaction] @hasMany

}

type ShareTransaction @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"]) # Added belongsTo institution
  shareAccountID: ID!

  shareAccount: ShareAccount @belongsTo(fields: ["shareAccountID"])
  transactionType: TransactionType!
  transactionDate: AWSDateTime!
  amount: Float!
  runningBalance: Float!
  notes: String
  deviceInfo: String
  ipAddress: AWSIPAddress

  glPostingID: ID
  glPosting: GLPosting @belongsTo(fields: ["glPostingID"])

  payrollRunDetailID: ID
  payrollRunDetail: PayrollRunDetail @belongsTo(fields: ["payrollRunDetailID"]) # Corrected from hasOne to belongsTo
  # Removed redundant and incorrect payrollRunDetails hasMany

  createdByUserID: ID!
  # createdByUser: User @belongsTo(fields: ["createdByUserID"]) # Optional: Add belongsTo user

}

type SavingsAccount @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"]) # Added belongsTo
  clientID: ID!
  client: Client @belongsTo(fields: ["clientID"])

  savingsProductID: ID!
  savingsProduct: SavingsProduct @belongsTo(fields: ["savingsProductID"])

  accountNumber: String!
  currentBalance: Float!
  accruedInterest: Float
  status: String!
  lienAmount: Float
  availableBalance: Float

  transactions: [SavingsTransaction] @hasMany

}

type SavingsTransaction @model {
  id: ID!
  savingsAccountID: ID!

  savingsAccount: SavingsAccount @belongsTo(fields: ["savingsAccountID"])
  transactionType: TransactionType!
  transactionDate: AWSDateTime!
  amount: Float!
  runningBalance: Float!

  notes: String
  deviceInfo: String
  ipAddress: AWSIPAddress

  glPostingID: ID
  glPosting: GLPosting @belongsTo(fields: ["glPostingID"])

  payrollRunDetail: PayrollRunDetail @hasOne

  # --- Relationships ---

  membershipFeeCharges: [MembershipFeeCharge] @hasMany

  createdByUserID: ID!
}

type MembershipFeeCharge @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"]) # Added belongsTo
  clientID: ID!
  client: Client @belongsTo(fields: ["clientID"])

  membershipFeeConfigID: ID!
  membershipFeeConfig: MembershipFeeConfig
    @belongsTo(fields: ["membershipFeeConfigID"])

  chargeDate: AWSDate!
  dueDate: AWSDate!
  amount: Float!
  status: String! # Due / Paid / Waived
  paidDate: AWSDate

  # savingsTransactionID is the FK on THIS model, linking to SavingsTransaction (N:1 from Charge to Transaction)
  savingsTransactionID: ID
  savingsTransaction: SavingsTransaction
    @belongsTo(fields: ["savingsTransactionID"])

  glPostingID: ID
  glPosting: GLPosting @belongsTo(fields: ["glPostingID"])

  Added missing createdAt
}

# ---------- Loan Origination ----------

type LoanApplication @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  applicationNumber: String!

  clientID: ID!
  client: Client @belongsTo(fields: ["clientID"])

  branchID: ID!
  branch: Branch @belongsTo(fields: ["branchID"])

  loanProductID: ID!
  loanProduct: LoanProduct @belongsTo(fields: ["loanProductID"])

  loanOfficerUserID: ID!

  loanOfficerUser: User @belongsTo(fields: ["loanOfficerUserID"])

  loanPurposeID: ID!
  loanPurpose: LoanPurposeConfig @belongsTo(fields: ["loanPurposeID"])

  requestedPrincipalAmount: Float!
  requestedTermMonths: Int!
  requestedFrequency: Frequency!
  applicationDate: AWSDateTime!

  status: LoanApplicationStatus!

  currentWorkflowStageID: ID
  workflowHistory: AWSJSON

  externalCreditReportAttached: Boolean
  manualCreditScore: Int
  manualCreditNarrative: String
  calculatedScore: Int
  calculatedGrade: String

  loanAccount: LoanAccount @hasOne(fields: ["id"])
  # For LoanApplication model (missing relationship to WriteOffRecord)
  writeOffRecords: [WriteOffRecord] @hasMany

  # --- Relationships ---

  collateral: [Collateral] @hasMany
  guarantors: [Guarantor] @hasMany
  documents: [ApplicationDocument] @hasMany

  deviceInfo: String
  lastModifiedByDeviceInfo: String

}

type Collateral @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"]) # Added belongsTo
  loanApplicationID: ID!

  loanApplication: LoanApplication @belongsTo(fields: ["loanApplicationID"])

  loanAccountID: ID
  loanAccount: LoanAccount @belongsTo(fields: ["loanAccountID"])

  collateralTypeID: ID!
  collateralType: CollateralTypeConfig @belongsTo(fields: ["collateralTypeID"])

  description: String!
  estimatedValue: Float!
  location: String
  serialNumber: String
  notes: String
  status: String! # Pledged / Released
  # --- Relationships ---

  repossessions: [RepossessionRecord] @hasMany

}

type Guarantor @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"]) # Added belongsTo
  loanApplicationID: ID!

  loanApplication: LoanApplication @belongsTo(fields: ["loanApplicationID"])

  loanAccountID: ID
  loanAccount: LoanAccount @belongsTo(fields: ["loanAccountID"])

  isExistingClient: Boolean!
  linkedClientID: ID

  linkedClient: Client @belongsTo(fields: ["linkedClientID"])

  externalFullName: String
  externalPhoneNumber: String
  externalAddress: String
  externalNationalID: String

}

type ApplicationDocument @model {
  id: ID!
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"]) # Added belongsTo
  loanApplicationID: ID!

  loanApplication: LoanApplication @belongsTo(fields: ["loanApplicationID"])

  documentTypeID: ID!
  documentType: ApplicationDocumentTypeConfig
    @belongsTo(fields: ["documentTypeID"])

  s3Key: String!
  fileName: String
  fileSize: Int
  contentType: String

}

# ---------- Loan Accounts & Collections ----------

type LoanAccount @model {
  id: ID!

  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"])

  accountNumber: String!

  loanApplicationID: ID!
  loanApplication: LoanApplication @belongsTo(fields: ["loanApplicationID"])

  clientID: ID!
  client: Client @belongsTo(fields: ["clientID"])

  branchID: ID!
  branch: Branch @belongsTo(fields: ["branchID"])

  loanProductID: ID!
  loanProduct: LoanProduct @belongsTo(fields: ["loanProductID"])

  loanOfficerUserID: ID!

  loanOfficerUser: User @belongsTo(fields: ["loanOfficerUserID"])

  # ---- Core loan terms ----

  originalPrincipalAmount: Float!
  disbursedPrincipalAmount: Float!
  interestRate: Float!
  loanTermMonths: Int!
  repaymentFrequency: Frequency!
  interestCalculationMethod: InterestCalculationMethod!
  dayCountConvention: DayCountConvention

  disbursementDate: AWSDate!
  firstRepaymentDate: AWSDate!
  maturityDate: AWSDate!

  # ---- Balances ----

  outstandingPrincipalBalance: Float!
  accruedInterestBalance: Float!
  accruedPenaltyBalance: Float!
  accruedFeeBalance: Float!
  totalOutstandingBalance: Float!

  nextDueDate: AWSDate
  nextInstallmentAmount: Float

  # ---- Status & risk ----

  status: LoanAccountStatus!

  daysPastDue: Int
  delinquencyBucket: String
  riskClassification: RiskClassification

  lastPaymentDate: AWSDate
  lastPaymentAmount: Float
  rescheduleHistory: AWSJSON
  closedDate: AWSDateTime

  # ---- One-to-one related records (parent side) ----

  writeOffRecord: WriteOffRecord @hasOne(fields: ["id"])
  legalActionRecord: LegalActionRecord @hasOne(fields: ["id"])
  repossessionRecord: RepossessionRecord @hasOne(fields: ["id"])
  collectionAssignment: CollectionAssignment @hasOne(fields: ["id"])

  # ---- Collections & collateral ----

  repaymentSchedule: [RepaymentScheduleInstallment] @hasMany
  transactions: [LoanTransaction] @hasMany
  collectionActions: [CollectionAction] @hasMany
  promisesToPay: [PromiseToPay] @hasMany
  collateral: [Collateral] @hasMany
  guarantors: [Guarantor] @hasMany
  collectionAlerts: [CollectionAlert] @hasMany

  # ---- Metadata ----

  lastModifiedByDeviceInfo: String
}

# Read‑only view – generated by a Lambda / Function

type RepaymentScheduleInstallment
  @model(queries: null, mutations: null, subscriptions: null) {
  id: ID! # Composite key "loanAccountID‑installmentNo"
  loanAccountID: ID!
  loanAccount: LoanAccount @belongsTo(fields: ["loanAccountID"])
  institutionID: ID!
  institution: Institution @belongsTo(fields: ["institutionID"]) # Added belongsTo institution
  installmentNumber: Int!
  dueDate: AWSDate!
  principalDue: Float!
  interestDue: Float!
  feeDue: Float!
  totalDue: Float!

  principalPaid: Float
  interestPaid: Float
  feePaid: Float
  penaltyPaid: Float
  totalPaid: Float

  outstandingPrincipalBalanceAfterPayment: Float!
  status: String! # Pending / PartiallyPaid / Paid / Overdue
  paidDate: AWSDate
  Added missing createdAt
}

type Loan @model {
  id: ID!
  approvalStatus: String
  approvedDate: AWSDate
  principal: Float
  fees: Float
  interestRate: Float
  startDate: AWSDate
  maturityDate: AWSDate
  stopDate: AWSDate
  extensionPeriod: Float
  duration: Float
  durationInterval: String
  loanType: String
  rateInterval: String
  loanStatus: String
  loanCurrency: String
  loanAttribute1: String
  loanAttribute2: String
  numberOfPayments: Float
  paymentFrequency: String
  borrower: Borrower @belongsTo
  payments: [Payment] @hasMany
  penalties: [Penalty] @hasMany
  loanFees: [LoanFees] @hasMany
  applications: [Application] @manyToMany(relationName: "LoanApplication")
  accounts: [Account] @manyToMany(relationName: "LoanAccount")
  guarantors: [Guarantor] @manyToMany(relationName: "LoanGuarantor")
  securities: [Security] @manyToMany(relationName: "LoanSecurity")
  contracts: [Contract] @manyToMany(relationName: "LoanContract")
  expenses: [Expense] @manyToMany(relationName: "LoanExpense")
  approvedByUserID: ID @index(name: "byApprovedByUserID")
  createdByUserID: ID @index(name: "byCreatedByUserID")
}

# ---------- Payroll ----------
type Employee @model {
  id: ID!
  firstName: String
  lastName: String
  middleName: String
  dateOfBirth: AWSDate
  phoneNumber1: String
  phoneNumber2: String
  email: String
  addressLine1: String
  addressLine2: String
  city: String
  stateProvince: String
  postalCode: String
  nextOfKinName: String
  nextOfKinPhoneNumber: String
  nextOfKinEmail: String
  nextOfKinRelationship: String
  nextOfKinAddress: String
  nationalID: String
  passportNumber: String
  nationality: String
  status: String 
  employmentType: String 
  employmentStatus: String 
  employmentStartDate: AWSDate
  employmentEndDate: AWSDate
  employmentPosition: String
  employmentDepartment: String
  employmentGrade: String
  employmentLocation: String
  grossSalary: Float
  bankAccountNumber: String
  bankName: String
  bankBranchCode: String
  socialSecurityNumber: String
  taxIdentificationNumber: String
  taxExemptStatus: String
  branch: Branch @belongsTo
  relatedUserID: ID @index(name: "byRelatedUserID")
  relatedBorrowerID: ID @index(name: "byRelatedBorrowerID")
  payroll: [Payroll] @manyToMany(relationName: "PayrollEmployee")
  # Supervisor relationship
  supervisorID: ID @index(name: "bySupervisorID")
  supervisor: Employee @belongsTo(fields: ["supervisorID"])
  subordinates: [Employee] @hasMany(indexName: "bySupervisorID", fields: ["id"])
}

type Investment @model {
  id: ID!
  principal: Float
  description: String
  fees: Float
  interestRate: Float
  startDate: AWSDate
  maturityDate: AWSDate
  stopDate: AWSDate
  extensionPeriod: Float
  duration: Float
  durationInterval: String
  type: String
  rateInterval: String
  investmentStatus: String
  investmentAttribute1: String
  investmentAttribute2: String
  numberOfPayments: Float
  paymentFrequency: Float
  investor: Investor @belongsTo
  accounts: [Account] @manyToMany(relationName: "InvestmentAccount")
}

type LoanFees @model {
  id: ID!
  amount: Float
  loanFeesDate: AWSDate
  loanFeesStatus: String
  notes: String
  loanFeesType: String
  loanFeesDescription: String
  loanFeesAttribute1: String
  loanFeesAttribute2: String
  loan: Loan @belongsTo
  account: ID @index(name: "byAccountID")
}


type Payroll @model {
  id: ID!
  periodStartDate: AWSDate
  periodEndDate: AWSDate
  payDate: AWSDate
  status: String 
  processedByUserID: String
  totalGrossPay: Float
  totalLoanDeductions: Float
  totalSavingsDeductions: Float
  totalShareDeductions: Float
  totalNetPay: Float
  details: String
  branch: Branch @belongsTo
  employees: [Employee] @manyToMany(relationName: "PayrollEmployee")
}

type Account @model {
  id: ID!
  name: String
  accountType: String
  accountNumber: String
  description: String
  currency: String
  currentBalance: Float
  openingBalance: Float
  interestRate: Float
  interestCalculationMethod: String
  interestPostingFrequency: String
  interestPostingDate: String
  interestAccrued: Float
  interestAccruedDate: AWSDate
  accountType: String
  accountStatus: String
  branch: Branch @belongsTo
  moneyTransactions: [MoneyTransaction] @hasMany
  expenses: [Expense] @hasMany
  loans: [Loan] @manyToMany(relationName: "LoanAccount")
  investments: [Investment] @manyToMany(relationName: "InvestmentAccount")
  otherIncomes: [OtherIncome] @manyToMany(relationName: "OtherIncomeAccount")
}

type MoneyTransaction @model {
  id: ID!
  transactionType: String
  transactionDate: AWSDate
  amount: Float!
  description: String
  referenceNumber: String
  relatedEntityType: String
  approvalStatus: String
  approvedDate: AWSDate
  category: String
  notes: String
  paymentMethod: String
  deviceInfo: String
  account: Account @belongsTo
  approvedByUserID: ID @index(name: "byApprovedByUserID")
  createdByUserID: ID @index(name: "byCreatedByUserID")
}

type Payment @model {
  id: ID!
  paymentDate: AWSDate
  paymentType: String
  amount: Float!
  description: String
  referenceNumber: String
  paymentMethod: String
  status: String
  notes: String
  loan: Loan @belongsTo
  account: ID @index(name: "byAccountID")
  receivingUser: ID @index(name: "byReceivingUserID")
  receivingEmployee: ID @index(name: "byReceivingEmployeeID")
}

type Expense @model {
  id: ID!
  transactionDate: AWSDate
  amount: Float!
  description: String
  referenceNumber: String
  receiptDocumentS3Key: String
  status: String
  notes: String
  payee: String
  paymentMethod: String
  checkNumber: String
  approvedDate: AWSDate
  type: String
  category: String
  account: Account @belongsTo
  loans: [Loan] @manyToMany(relationName: "LoanExpense")
  approvedByUserID: ID @index(name: "byApprovedByUserID")
  createdByUserID: ID @index(name: "byCreatedByUserID")
}

type FinancialReport @model {
  id: ID!
  reportName: String
  reportType: String
  reportDate: AWSDate
  startDate: AWSDate
  endDate: AWSDate
  reportData: AWSJSON
  branch: Branch @belongsTo
}

# ---------- End of Schema ----------
